{"version":3,"sources":["services/users.js","services/index.js","images/guard-logo.png","components/Credit.jsx","components/login/Login2.jsx","components/UnauthenticatedApp.js","containers/UnauthenticatedApp.js"],"names":["userService","login","user","password","data","email","axios","post","then","response","storeAPI","set","success","error","Promise","reject","logout","remove","register","input","getAll","get","authHeader","getById","id","url","update","put","delete","module","exports","Credit","styles","className","style","href","target","defaultProps","Login","signIn","useState","setEmail","setPassword","position","right","top","fontSize","color","Otransition","WebkitTransition","transition","role","maxWidth","name","onSubmit","event","htmlFor","type","placeholder","value","onChange","e","required","icon","to","bottom","library","add","faLock","faUser","faEnvelope","UnauthenticatedApp","classNames","fakeData","token","connect","dispatch","userActions","loginRequest","loginSuccess","preventDefault"],"mappings":"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","file":"static/js/5.8ba4bf5c.chunk.js","sourcesContent":["import { authHeader } from '../helpers'\r\nimport storeAPI from 'store'\r\nimport axios from 'axios'\r\n\r\nconst login = ( user, password ) => {\r\n    const url = 'http://api.inventory.ng/user/login',\r\n          data = { email: user, password },\r\n          options = { 'Content-Type': 'application/json' }\r\n\r\n    return axios.post( url, data, options )\r\n                .then ( response => {\r\n                    storeAPI.set('user', response.data.success)\r\n                    return response\r\n                }, error => {\r\n                    return Promise.reject(error)\r\n                } )     \r\n}\r\n\r\nconst logout = () => storeAPI.remove('user')\r\n\r\nconst register = ( input ) => {\r\n    const url = 'http://api.inventory.ng/user/register',\r\n          data = input, // object\r\n          options = { 'Content-Type': 'application/json' }\r\n\r\n    return axios.post( url, data, options ).then( response => response , error => Promise.reject(error) )\r\n}\r\n\r\nconst getAll = () => {\r\n    const url = 'http://api.inventory.ng/users'\r\n\r\n    return axios.get( url, authHeader() ).then( response => response , error => Promise.reject(error) )\r\n}\r\n\r\nconst getById = id => {\r\n    const url = `http://api.inventory.ng/users/${id}`\r\n\r\n    return axios.get( url, authHeader() ).then( response => response , error => Promise.reject(error) )\r\n}\r\n\r\nconst update = input => {\r\n    const url = `http://api.inventory.ng/users`,\r\n          data = input // object\r\n\r\n    return axios.put( url, data, authHeader() ).then( response => response , error => Promise.reject(error) )\r\n}\r\n\r\nconst _delete = id => {\r\n    const url = `http://api.inventory.ng/users/${id}`\r\n\r\n    return axios.delete( url, authHeader() ).then( response => response , error => Promise.reject(error) )\r\n}\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n}\r\n/*\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text)\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout()\r\n                window.location.reload(true)\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText\r\n            return Promise.reject(error)\r\n        }\r\n\r\n        return data\r\n    })\r\n}\r\n*/","\r\nimport { userService } from './users'\r\n\r\nexport {\r\n    userService\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/guard-logo.f6bb0b87.png\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Credit = ({ styles }) => (\r\n    <div className='credit' style={styles}>\r\n        Software powered by\r\n        <a href=\"http://inventory.ng\" target=\"guard\"> Guard Systems</a>\r\n    </div>\r\n)\r\n\r\nCredit.defaultProps = {\r\n    styles: {},\r\n}\r\n\r\nCredit.propTypes = {\r\n    styles: PropTypes.object,\r\n}\r\n\r\nexport default Credit\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Credit from '../Credit'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Login = ({ signIn }) => {\r\n\r\n    const [ email, setEmail ] = useState('')\r\n    const emailHandler = e => setEmail(e.target.value)\r\n    \r\n    const [ password, setPassword ] = useState('')\r\n    const passwordHandler = e => setPassword(e.target.value)\r\n\r\n    let styles = {\r\n        position: 'absolute',\r\n        right: '12px',\r\n        top: '8.5px',\r\n        fontSize: '13px',\r\n        color: '#227dc7',\r\n        Otransition: 'all .5s',\r\n        WebkitTransition: 'all .5s',\r\n        transition: 'all .5s',\r\n    }\r\n\r\n    return (\r\n        <main role=\"main\" className=\"app-login bg-dark vh-100 d-flex flex-column justify-content-center align-items-center\">\r\n            <div className=\"container\">\r\n                <div className=\"card card-login mx-auto\" style={{ maxWidth: '350px' }}>\r\n                    <div className=\"card-body\">\r\n                        <form name=\"signin\" onSubmit={ (event) => signIn(email, password, event) }>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"label\" htmlFor=\"email\">Email Address:</label>\r\n                                <div className=\"position-relative\">\r\n                                    <input type=\"email\" name=\"email\" className=\"form-control\" id=\"email\" placeholder=\"Email\" value={email} onChange={emailHandler} required=\"required\" />\r\n                                    <i style={styles}><FontAwesomeIcon icon=\"envelope\" /></i>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label className=\"label d-flex d-flex justify-content-between align-items-center\" htmlFor=\"password\">\r\n                                    Password:\r\n                                    <Link className=\"d-block small\" to=\"/resetpassword\">Forgot?</Link>\r\n                                </label>\r\n                                <div className=\"position-relative\">\r\n                                    <input type=\"password\" name=\"password\" className=\"form-control\" id=\"password\" placeholder=\"Password\" value={password} onChange={passwordHandler} required=\"required\" />\r\n                                    <i style={styles}><FontAwesomeIcon icon=\"lock\" /></i>\r\n                                </div>\r\n                            </div>        \r\n\r\n                            <div className=\"form-group\">\r\n                                <div className=\"form-check\">\r\n                                    <label className=\"form-check-label\">\r\n                                    <input className=\"form-check-input\" type=\"checkbox\" /> Remember me</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <input type=\"submit\" className=\"btn btn-primary btn-block\" name=\"submit\" value=\"Login\" />\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className=\"card-footer text-center\">\r\n                        Don't have an account?&nbsp;\r\n                        <Link to=\"/register\">Sign up</Link>\r\n                    </div>                    \r\n                </div>       \r\n            </div>\r\n\r\n            <Credit styles={{ position: 'absolute', bottom: 0, color: '#fff' }} />\r\n        </main>\r\n    )\r\n\r\n}\r\n\r\nLogin.propTypes = {\r\n    signIn: PropTypes.func.isRequired, \r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport { Login2 as Login } from './login'\r\nimport icon from '../images/guard-logo.png'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faLock, faUser, faEnvelope } from '@fortawesome/free-solid-svg-icons'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nlibrary.add( faLock, faUser, faEnvelope )\r\n\r\nconst UnauthenticatedApp = ({ signIn }) => {\r\n    return (\r\n        <Login icon={icon} signIn={signIn} className={classNames( 'app-login', 'theme1' )} />\r\n    )\r\n\r\n}\r\n\r\nUnauthenticatedApp.propTypes = {\r\n    signIn: PropTypes.func.isRequired, \r\n}\r\n\r\nexport default UnauthenticatedApp\r\n","import { connect } from 'react-redux'\r\nimport { userService } from '../services'\r\nimport { userActions, alertActions } from '../actions'\r\nimport UnauthenticatedApp from '../components/UnauthenticatedApp'\r\nimport storeAPI from 'store'\r\n\r\nconst real = false\r\nconst fakeData = {\r\n    id: 1,\r\n    name: 'marin63',\r\n    email: 'quadhay@gmail.com',\r\n    token: 'PgGH12wUZP9DqLoQ582Nh7rTODMH5T4F'\r\n}\r\n\r\nconst mapDispatch = dispatch => ({\r\n    signIn: ( user, password, event ) => {\r\n        dispatch(userActions.loginRequest(user))\r\n\r\n        if (real) {\r\n            userService\r\n                .login(user, password)\r\n                    .then(\r\n                        response => { \r\n                            dispatch(userActions.loginSuccess(response.data.success))\r\n                        },\r\n                        error => {\r\n                            dispatch(userActions.loginFailure(error))\r\n                            dispatch(alertActions.error(error))\r\n                        }\r\n                    )\r\n        } else {\r\n            storeAPI.set('user', fakeData)\r\n            dispatch(userActions.loginSuccess(fakeData))\r\n        }\r\n\r\n        event.preventDefault()\r\n    }\r\n})\r\n\r\nexport default connect( null, mapDispatch )(UnauthenticatedApp)\r\n"],"sourceRoot":""}